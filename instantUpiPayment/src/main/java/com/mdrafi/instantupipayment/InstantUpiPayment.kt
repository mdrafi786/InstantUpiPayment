package com.mdrafi.instantupipayment

import android.app.Activity
import android.content.Intent
import android.net.Uri
import android.util.Log
import androidx.activity.result.ActivityResult
import androidx.activity.result.ActivityResultLauncher
import com.mdrafi.instantupipayment.InstantUpiPayment.Builder
import com.mdrafi.instantupipayment.exception.AppNotFoundException
import com.mdrafi.instantupipayment.model.Payment
import com.mdrafi.instantupipayment.model.PaymentApp
import com.mdrafi.instantupipayment.model.TransactionDetails
import com.mdrafi.instantupipayment.model.TransactionStatus

/**
 * Class to implement Instant UPI
 * Use [Builder] to create a new instance.
 */
class InstantUpiPayment constructor(
    private val mActivity: Activity,
    private val mPayment: Payment,
) {

    private var onTransactionCompleted: (TransactionDetails) -> Unit = {}
    private var onTransactionCancelled: (error: String) -> Unit = {}

    /**
     * Starts the payment transaction. Calling this method launches the payment
     * and shows installed UPI apps in device and let user choose one of them to pay.
     */
    fun startPayment(resultLauncher: ActivityResultLauncher<Intent>) {
        // Set Data Intent
        val paymentIntent = Intent(Intent.ACTION_VIEW).apply {
            data = getUri()
            // Check for Default package
            mPayment.defaultPackage?.let { `package` = it }
        }

        // Show Dialog to user
        val appChooser = Intent.createChooser(paymentIntent, "Pay using")

        // Check if other UPI apps are exists or not.
        if (paymentIntent.resolveActivity(mActivity.packageManager) != null) {
            resultLauncher.launch(appChooser)
        } else {
            throwOnAppNotFound()
        }
    }

    private fun getUri(): Uri {
        return Uri.Builder().apply {
            with(mPayment) {
                scheme("upi").authority("pay")
                appendQueryParameter("pa", vpa)
                appendQueryParameter("pn", name)
                appendQueryParameter("tid", txnId)
                appendQueryParameter("mc", payeeMerchantCode)
                appendQueryParameter("tr", txnRefId)
                appendQueryParameter("tn", description)
                appendQueryParameter("am", amount)
                appendQueryParameter("cu", currency)
            }
        }.build()
    }

    /**
     * Sets the PaymentStatusListener.
     */
    fun addPaymentStatusListener(
        onTransactionCompleted: (TransactionDetails) -> Unit = {},
        onTransactionCancelled: (error: String) -> Unit = {},
    ) {
        this.onTransactionCompleted = onTransactionCompleted
        this.onTransactionCancelled = onTransactionCancelled
    }

    /**
     * Builder for [InstantUpiPayment].
     */
    class Builder(private val activity: Activity) {

        var paymentApp: PaymentApp = PaymentApp.ALL
        var payeeVpa: String? = null
        var payeeName: String? = null
        var payeeMerchantCode: String? = null
        var transactionId: String? = null
        var transactionRefId: String? = null
        var description: String? = null
        var amount: String? = null

        /**
         * Sets default payment app for transaction.
         *
         * @param paymentApp Sets default payment app from Enum of [PaymentApp].
         * For e.g. To start payment with BHIM UPI then use [PaymentApp.BHIM_UPI].
         */
        fun with(paymentApp: PaymentApp = PaymentApp.ALL): Builder = apply {
            this.paymentApp = paymentApp
        }

        /**
         * Sets the Payee VPA (e.g. example@vpa, 1234XXX@upi).
         */
        fun setPayeeVpa(vpa: String): Builder = apply { payeeVpa = vpa }

        /**
         * Sets the Payee Name.
         */
        fun setPayeeName(name: String): Builder = apply { payeeName = name }

        /**
         * Sets the Merchant Code. If present it should be passed.
         */
        fun setPayeeMerchantCode(merchantCode: String): Builder = apply {
            this.payeeMerchantCode = merchantCode
        }

        /**
         * Sets the Transaction ID. This field is used in Merchant Payments generated by PSPs.
         */
        fun setTransactionId(id: String): Builder = apply { this.transactionId = id }

        /**
         * Sets the Transaction Reference ID. Transaction reference ID. This could be order number,
         * subscription number, Bill ID, booking ID, insurance renewal reference, etc.
         * Needed for merchant transactions and dynamic URL generation.
         */
        fun setTransactionRefId(refId: String): Builder = apply { this.transactionRefId = refId }

        /**
         * Sets the Description. It have to provide valid small note or description about payment.
         * for e.g. For Food
         */
        fun setDescription(description: String): Builder = apply { this.description = description }

        /**
         * Sets the Amount in INR. (Format should be decimal e.g. 14.88)
         *
         * @param amount field takes amount in String decimal format (xx.xx) to be paid.
         * For e.g. 90.88 will pay Rs. 90.88.
         */
        fun setAmount(amount: String): Builder = apply { this.amount = amount }

        /**
         * Build the [InstantUpiPayment] object.
         */
        @Throws(IllegalStateException::class, AppNotFoundException::class)
        fun build(): InstantUpiPayment {
            validate()
            val payment = Payment(
                currency = "INR",
                vpa = payeeVpa ?: "",
                name = payeeName ?: "",
                payeeMerchantCode = payeeMerchantCode ?: "",
                txnId = transactionId ?: "",
                txnRefId = transactionRefId ?: "",
                description = description ?: "",
                amount = amount ?: "",
                defaultPackage = if (paymentApp != PaymentApp.ALL) paymentApp.packageName else null
            )
            return InstantUpiPayment(activity, payment)
        }

        private fun validate() {
            if (paymentApp != PaymentApp.ALL && !isPackageInstalled(paymentApp.packageName)) {
                throw AppNotFoundException(paymentApp.packageName)
            }

            payeeVpa.run {
                checkNotNull(this) { "Must call setPayeeVpa() before build()." }
                check(this.matches("""^[\w-.]+@([\w-])+""".toRegex())) {
                    "Payee VPA address should be valid (For e.g. example@vpa)"
                }
            }

            payeeMerchantCode?.run {
                checkNotNull(this) { "Payee Merchant Code Should be Valid!" }
            }

            transactionId.run {
                checkNotNull(this) { "Must call setTransactionId() before build" }
                check(this.isNotBlank()) { "Transaction ID Should be Valid!" }
            }

            transactionRefId.run {
                checkNotNull(this) { "Must call setTransactionRefId() before build" }
                check(this.isNotBlank()) { "RefId Should be Valid!" }
            }

            payeeName.run {
                checkNotNull(this) { "Must call setPayeeName() before build()." }
                check(this.isNotBlank()) { "Payee name Should be Valid!" }
            }

            amount.run {
                checkNotNull(this) { "Must call setAmount() before build()." }
                check(this.matches("""\d+\.\d*""".toRegex())) {
                    "Amount should be valid positive number and in decimal format (For e.g. 100.00)"
                }
            }

            description.run {
                checkNotNull(this) { "Must call setDescription() before build()." }
                check(this.isNotBlank()) { "Description Should be Valid!" }
            }
        }

        /**
         * Check Whether UPI App is installed on device or not
         *
         */
        @Suppress("DEPRECATION")
        private fun isPackageInstalled(packageName: String): Boolean = runCatching {
            activity.packageManager.getPackageInfo(packageName, 0)
            true
        }.getOrDefault(false)
    }

    companion object {
        const val TAG = "InstantUpiPayment"
    }

    fun onActivityResult(result: ActivityResult?) {
        if (result?.resultCode == Activity.RESULT_OK) {
            if (result.data != null) {
                // Get Response from activity intent
                val response = result.data?.getStringExtra("response")

                if (response == null) {
                    onTransactionCancelled.invoke("Payment Response is null")
                    Log.d(TAG, "Payment Response is null")
                } else {
                    runCatching {
                        // Get transactions details from response.
                        val transactionDetails = getTransactionDetails(response)

                        // Update Listener onTransactionCompleted()
                        onTransactionCompleted.invoke(transactionDetails)
                    }.getOrElse {
                        onTransactionCancelled.invoke(it.message.toString())
                    }
                }
            } else {
                Log.e(TAG, "Intent Data is null. User cancelled")
                onTransactionCancelled.invoke("User cancelled")
            }
        }
    }

    // Make TransactionDetails object from response string
    private fun getTransactionDetails(response: String): TransactionDetails {
        return with(getMapFromQuery(response)) {
            TransactionDetails(
                transactionId = get("txnId"),
                responseCode = get("responseCode"),
                approvalRefNo = get("ApprovalRefNo"),
                transactionRefId = get("txnRef"),
                amount = mPayment.amount,
                transactionStatus = TransactionStatus.valueOf(
                    get("Status")?.uppercase()
                        ?: TransactionStatus.FAILED.name
                )
            )
        }
    }

    private fun getMapFromQuery(queryString: String): Map<String, String> {
        val map = mutableMapOf<String, String>()
        val keyValuePairs = queryString
            .split("&")
            .map { param ->
                param.split("=").let { Pair(it[0], it[1]) }
            }
        map.putAll(keyValuePairs)
        return map
    }

    private fun throwOnAppNotFound() {
        Log.e(TAG, "No UPI app found on device.")
        throw AppNotFoundException(mPayment.defaultPackage)
    }
}


fun InstantUpiPayment(
    activity: Activity,
    initializer: Builder.() -> Unit,
): InstantUpiPayment {
    return Builder(activity).apply(initializer).build()
}

